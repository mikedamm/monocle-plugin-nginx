load_module modules/ngx_http_js_module.so;
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    resolver $RESOLVER ipv6=off;
    js_fetch_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    js_import /nginx-scripts/captcha.js;

    server {
        $LISTEN_CFG
        $SSL_CERT
        $SSL_KEY

        # Set the default value for the variable
        set $mclVerifyToken $VERIFY_TOKEN;
        set $cookieSecret $COOKIE_SECRET;
        set $blockVPNs $BLOCK_VPNS;
        set $blockProxies $BLOCK_PROXIES;
        set $testLocalHost $TEST_LOCALHOST;
        set $checkXForwardedFor $CHECK_XFORWARDED_FOR;
        set $verifiedHeaderValue $VERIFIED_HEADER_VALUE;

        location / {
            js_set $cookieSecret cookieSecret;
            js_content captcha.checkCookieAndCaptcha;
        }
        error_page 403 /denied.html;

        location /internal_proxy {
            internal;

            # Use a variable to capture the original request URI
            set $target_uri $request_uri;

            # Proxy the request to the target, including the original URI
            proxy_pass $PROXY_PASS$target_uri;

            set $cleaned_cookie $http_cookie;
            if ($http_cookie ~ '(.*)(^|;\s)MCLVALID=("[^"]*"|[^\s]*[^;]?)(\2|$|;$)(?:;\s)?(.*)') {
                set $cleaned_cookie $1$4$5;
            }
            proxy_hide_header Cookie;
            proxy_set_header Cookie $cleaned_cookie;

            # Additional proxy settings...
            proxy_set_header Host $host;
            proxy_set_header Monocle-Verified $verifiedHeaderValue;
            proxy_set_header Monocle-Connecting-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /captcha_page.html {
            # Serve the captcha page
            root /local-content/;
        }

        location = /validate_captcha {
            js_set $mclVerifyToken mclVerifyToken;
            js_set $cookieSecret cookieSecret;
            js_set $blockVPNs blockVPNs;
            js_set $blockProxies blockProxies;
            js_set $testLocalHost testLocalHost;
            js_set $checkXForwardedFor checkXForwardedFor;
            # Endpoint to validate the captcha
            js_content captcha.validateCaptcha;
        }

        location = /denied {
            return 403;
        }

        location = /denied.html {
            root /local-content/;
        }
    }
}

